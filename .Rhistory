test95_GUMBEL_static$cc.LRstat,
test95_JOE_static$cc.LRstat
)
LRcc_95_pval_stat <- c(
test95_GAUSS_static$cc.LRp,
test95_T_static$cc.LRp,
test95_CLAYTON_static$cc.LRp,
test95_FRANK_static$cc.LRp,
test95_GUMBEL_static$cc.LRp,
test95_JOE_static$cc.LRp
)
Lopez95_static <- c(
lopez95_GAUSS_static,
lopez95_T_static,
lopez95_CLAYTON_static,
lopez95_FRANK_static,
lopez95_GUMBEL_static,
lopez95_JOE_static
)
tableVaR95_static <- data.frame(
Model = copula_names_final,
ExpVio95 = ExpVio95_static,
ActVio95 = ActVio95_static,
MT95 = round(ZT95_static, 4),
LRuc = combine_stat_pval(LRuc_95_stat, LRuc_95_pval_stat),
LRcc = combine_stat_pval(LRcc_95_stat, LRcc_95_pval_stat),
Lopez95 = round(Lopez95_static, 5) * (100/ActVio95_static)
)
# === Table 99% ===
ExpVio99_static <- c(
test99_GAUSS_static$expected.exceed,
test99_T_static$expected.exceed,
test99_CLAYTON_static$expected.exceed,
test99_FRANK_static$expected.exceed,
test99_GUMBEL_static$expected.exceed,
test99_JOE_static$expected.exceed
)
ActVio99_static <- c(
test99_GAUSS_static$actual.exceed,
test99_T_static$actual.exceed,
test99_CLAYTON_static$actual.exceed,
test99_FRANK_static$actual.exceed,
test99_GUMBEL_static$actual.exceed,
test99_JOE_static$actual.exceed
)
ZT99_static <- ActVio99_static / length(V_test)
LRuc_99_stat <- c(
test99_GAUSS_static$uc.LRstat,
test99_T_static$uc.LRstat,
test99_CLAYTON_static$uc.LRstat,
test99_FRANK_static$uc.LRstat,
test99_GUMBEL_static$uc.LRstat,
test99_JOE_static$uc.LRstat
)
LRuc_99_pval_stat <- c(
test99_GAUSS_static$uc.LRp,
test99_T_static$uc.LRp,
test99_CLAYTON_static$uc.LRp,
test99_FRANK_static$uc.LRp,
test99_GUMBEL_static$uc.LRp,
test99_JOE_static$uc.LRp
)
LRcc_99_stat <- c(
test99_GAUSS_static$cc.LRstat,
test99_T_static$cc.LRstat,
test99_CLAYTON_static$cc.LRstat,
test99_FRANK_static$cc.LRstat,
test99_GUMBEL_static$cc.LRstat,
test99_JOE_static$cc.LRstat
)
LRcc_99_pval_stat <- c(
test99_GAUSS_static$cc.LRp,
test99_T_static$cc.LRp,
test99_CLAYTON_static$cc.LRp,
test99_FRANK_static$cc.LRp,
test99_GUMBEL_static$cc.LRp,
test99_JOE_static$cc.LRp
)
Lopez99_static <- c(
lopez99_GAUSS_static,
lopez99_T_static,
lopez99_CLAYTON_static,
lopez99_FRANK_static,
lopez99_GUMBEL_static,
lopez99_JOE_static
)
tableVaR99_static <- data.frame(
Model = copula_names_final,
ExpVio99 = ExpVio99_static,
ActVio99 = ActVio99_static,
MT99 = round(ZT99_static, 4),
LRuc = combine_stat_pval(LRuc_99_stat, LRuc_99_pval_stat),
LRcc = combine_stat_pval(LRcc_99_stat, LRcc_99_pval_stat),
Lopez99 = round(Lopez99_static, 5) * (100/ActVio99_static)
)
tableVaR95_static
tableVaR99_static
# =============================================================================
#                           Other
# =============================================================================
# In this script we present:
# 1. News Impact Curve
# 2. Exceedence correlation (log returns and pseudo-observation)
# 3. Final tables (tables GARCH-Copula with Static Fit, GARCH-Copula with Dynamic Fit)
# 4. Chart ofo copula approach in parallel
# =============================================================================
# ========================== News Impact Curve ================================
series_names <- c("ITA", "GER", "FRA", "SPA")
series_labels <- c(ITA = "FTSEMIB", GER = "DAX", FRA = "CAC", SPA = "IBEX")
model_list <- list(
sGARCH    = list(model = "sGARCH", submodel = NULL),
AVGARCH   = list(model = "fGARCH", submodel = "AVGARCH"),
gjrGARCH  = list(model = "gjrGARCH", submodel = NULL),
TGARCH    = list(model = "fGARCH", submodel = "TGARCH")
)
model_colors <- c(sGARCH = "black", AVGARCH = "blue", gjrGARCH = "red", TGARCH = "darkgreen")
fit_results <- list()
# Models estimation
for (series in series_names) {
fit_results[[series]] <- list()
for (model_name in names(model_list)) {
model_info <- model_list[[model_name]]
if (model_name == "AVGARCH") {
spec <- ugarchspec(
variance.model = list(model = model_info$model,
garchOrder = c(1,1),
submodel = model_info$submodel),
mean.model = list(armaOrder = c(0,0), include.mean = FALSE),
distribution.model = "sstd",
fixed.pars = list(eta1 = 0, eta2 = 0)
)
} else {
spec <- ugarchspec(
variance.model = list(model = model_info$model,
garchOrder = c(1,1),
submodel = model_info$submodel),
mean.model = list(armaOrder = c(0,0), include.mean = FALSE),
distribution.model = "sstd"
)
}
fit <- ugarchfit(spec, data = X[[series]], solver = "hybrid")
fit_results[[series]][[model_name]] <- fit
}
}
# Chart
compute_nic <- function(model_fit, model_type) {
p <- coef(model_fit)
eps <- seq(-4, 4, length.out = 500)
omega <- p["omega"]
alpha <- p["alpha1"]
beta  <- p["beta1"]
if (model_type == "sGARCH") {
nic <- sqrt(omega + alpha * eps^2 + beta)
} else if (model_type == "AVGARCH") {
nic <- omega + alpha * abs(eps) + beta
} else if (model_type == "gjrGARCH") {
gamma <- p["gamma1"]
indicator <- ifelse(eps < 0, 1, 0)
nic <- sqrt(omega + alpha * eps^2 + gamma * eps^2 * indicator + beta)
} else if (model_type == "TGARCH") {
eta1 <- p["eta11"]
nic <- omega + alpha * (abs(eps) - eta1 * eps) + beta
} else {
stop("Unknown model type")
}
return(data.frame(eps = eps, nic = nic, model = model_type))
}
# Plot of a single serie
plot_nics_grid_ggplot <- function(series_name, fit_results, label_map) {
plots <- list()
for (model_name in names(fit_results[[series_name]])) {
df <- compute_nic(fit_results[[series_name]][[model_name]], model_name)
p <- ggplot(df, aes(x = eps, y = nic)) +
geom_line(color = model_colors[[model_name]], linewidth = 1) +
labs(title = paste(label_map[[series_name]], "-", model_name),
x = expression(epsilon[t-1]), y = expression(sigma[t])) +
theme_minimal(base_size = 10) +
theme(plot.title = element_text(hjust = 0.5, face = "bold"))
plots[[model_name]] <- p
}
return(wrap_plots(plots, ncol = 2))
}
# All plots
for (series in series_names) {
g <- plot_nics_grid_ggplot(series, fit_results, series_labels)
ggsave(file.path("Data/Chart Post preliminar analysis", paste0("NIC_", series, ".pdf")),
g, width = 8, height = 6)
}
# ====================== Excedeence correlation ===============================
U_matrix <- as.data.frame(U_matrix)
colnames(U_matrix) <- c("ITA", "GER", "FRA", "SPA")
# Function for bootstrap
plot_rho_matrix_gg_bootstrap <- function(data, title_prefix = "", B = 500) {
library(dplyr)
library(tidyr)
library(purrr)
library(ggplot2)
library(patchwork)
rho_extreme_boot <- function(X, Y, q, B = 500) {
n <- length(X)
qx <- quantile(X, q)
qy <- quantile(Y, q)
if (q <= 0.5) {
idx <- which(X <= qx & Y <= qy)
} else {
idx <- which(X > qx & Y > qy)
}
if (length(idx) < 5) return(tibble(rho = NA, lower = NA, upper = NA, q = q))
boots <- replicate(B, {
samp_idx <- sample(idx, replace = TRUE)
cor(X[samp_idx], Y[samp_idx], use = "complete.obs")
})
tibble(
q = q,
rho = mean(boots, na.rm = TRUE),
lower = quantile(boots, 0.025, na.rm = TRUE),
upper = quantile(boots, 0.975, na.rm = TRUE)
)
}
index_labels <- c("ITA" = "FTSEMIB", "GER" = "DAX", "FRA" = "CAC", "SPA" = "IBEX")
series_names <- c("ITA", "GER", "FRA", "SPA")
pairs <- combn(series_names, 2, simplify = FALSE)
q_vals <- seq(0.05, 0.95, by = 0.05)
all_results <- map_dfr(pairs, function(pair) {
X <- data[[pair[1]]]
Y <- data[[pair[2]]]
map_dfr(q_vals, function(q) {
rho_extreme_boot(X, Y, q, B) %>%
mutate(pair = paste(index_labels[pair[1]], "-", index_labels[pair[2]]))
})
})
# Plot
ggplot(all_results, aes(x = q, y = rho)) +
geom_ribbon(aes(ymin = lower, ymax = upper), fill = "lightblue", alpha = 0.4) +
geom_line(color = "steelblue", linewidth = 0.8) +
geom_point(color = "steelblue", size = 1.4) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray40") +
facet_wrap(~pair, ncol = 2) +
labs(
x = "Quantile (q)",
y = expression(rho^e)
# title = title_prefix  # rimosso titolo principale
) +
theme_minimal(base_size = 13) +
theme(
# plot.title = element_text(size = 15, face = "bold", hjust = 0.5),  # disattivato
strip.text = element_text(size = 30, face = "bold")
)
}
p_log <- plot_rho_matrix_gg_bootstrap(X, "Log Returns")
ggsave("Data/Chart preliminar analysis/rho_extreme_logreturns_bootstrap.pdf", p_log, width = 12, height = 8)
p_pit <- plot_rho_matrix_gg_bootstrap(U_matrix, "PIT Residuals")
ggsave("Data/Chart Post preliminar analysis/rho_extreme_pit_bootstrap.pdf", p_pit, width = 12, height = 8)
# ========================= Final Tables ========================================
names(tableVaR95) <- c("Model", "ExpVio", "ActVio", "MT", "LRuc", "LRcc", "Lopez")
names(tableVaR99) <- c("Model", "ExpVio", "ActVio", "MT", "LRuc", "LRcc", "Lopez")
tableVaR_dynamic <- rbind(tableVaR95, tableVaR99)
names(tableVaR95_static) <- c("Model", "ExpVio", "ActVio", "MT", "LRuc", "LRcc", "Lopez")
names(tableVaR99_static) <- c("Model", "ExpVio", "ActVio", "MT", "LRuc", "LRcc", "Lopez")
tableVaR_static <- rbind(tableVaR95_static, tableVaR99_static)
names(tableVaR95_OT) <- c("Model", "ExpVio", "ActVio", "MT", "LRuc", "LRcc", "Lopez")
names(tableVaR99_OT) <- c("Model", "ExpVio", "ActVio", "MT", "LRuc", "LRcc", "Lopez")
tableVaR_OT <- rbind(tableVaR95_OT, tableVaR99_OT)
tableVaR95_all <- rbind(tableVaR95, tableVaR95_static, tableVaR95_OT)
tableVaR99_all <- rbind(tableVaR99, tableVaR99_static, tableVaR99_OT)
# ====================== PLOT Garch-Copula with static and dynamic fit ========
copula_names <- c("T", "GAUSS", "FRANK", "GUMBEL", "CLAYTON", "JOE")
# Separate lists
plot_list_dynamic <- vector("list", length(copula_names))
plot_list_static  <- vector("list", length(copula_names))
# Create plot for dynamic fit
for (i in seq_along(copula_names)) {
copula <- copula_names[i]
VaR95 <- get(paste0("VaR95_MC_", copula))
VaR99 <- get(paste0("VaR99_MC_", copula))
p <- (function() {
plot_VaR_hits(copula, V_test, X_test, VaR95, VaR99,
col = c("black", "darkblue", "lightblue", "red", "orange"))
ggplot2::last_plot()
})()
p <- p + labs(title = paste(copula, "- Dynamic Fit"), x = NULL, y = NULL) +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 20),
axis.text = element_text(size = 6))
plot_list_dynamic[[i]] <- p
}
# Create plot for static fit
for (i in seq_along(copula_names)) {
copula <- copula_names[i]
VaR95 <- get(paste0("VaR95_MC_", copula, "_static"))
VaR99 <- get(paste0("VaR99_MC_", copula, "_static"))
p <- (function() {
plot_VaR_hits(copula, V_test, X_test, VaR95, VaR99,
col = c("black", "darkgreen", "green", "red", "orange"))
ggplot2::last_plot()
})()
p <- p + labs(title = paste(copula, "- Static Fit"), x = NULL, y = NULL) +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 20),
axis.text = element_text(size = 6))
plot_list_static[[i]] <- p
}
#  T, GAUSS, CLAYTON
indici_parte1 <- match(c("T", "GAUSS", "CLAYTON"), copula_names)
paired_plots_1 <- vector("list", length(indici_parte1) * 2)
for (i in seq_along(indici_parte1)) {
idx <- indici_parte1[i]
paired_plots_1[[2*i - 1]] <- plot_list_dynamic[[idx]]
paired_plots_1[[2*i]]     <- plot_list_static[[idx]]
}
combined_part1 <- wrap_plots(paired_plots_1, ncol = 2, nrow = 3)
#  FRANK, GUMBEL, JOE
indici_parte2 <- match(c("FRANK", "GUMBEL", "JOE"), copula_names)
paired_plots_2 <- vector("list", length(indici_parte2) * 2)
for (i in seq_along(indici_parte2)) {
idx <- indici_parte2[i]
paired_plots_2[[2*i - 1]] <- plot_list_dynamic[[idx]]
paired_plots_2[[2*i]]     <- plot_list_static[[idx]]
}
combined_part2 <- wrap_plots(paired_plots_2, ncol = 2, nrow = 3)
# Save
ggsave("Data/Chart Post preliminar analysis/COMPARISON_STATIC_vs_DYNAMIC_part1.pdf",
combined_part1, width = 12, height = 9)
ggsave("Data/Chart Post preliminar analysis/COMPARISON_STATIC_vs_DYNAMIC_part2.pdf",
combined_part2, width = 12, height = 9)
combined_part2
combined_part1
models_OT <- c("40 bins-0.0050 eps", "75 bins-0.0050 eps", "50 bins-0.0050 eps")
# === 95% ===
ExpVio95_OT <- c(test95_OT_TOP1$expected.exceed,
test95_OT_TOP2$expected.exceed,
test95_OT_TOP3$expected.exceed)
ActVio95_OT <- c(test95_OT_TOP1$actual.exceed,
test95_OT_TOP2$actual.exceed,
test95_OT_TOP3$actual.exceed)
ZT95_OT <- round(ActVio95_OT / length(V_test), 4)
UCstat95_OT <- c(test95_OT_TOP1$uc.LRstat,
test95_OT_TOP2$uc.LRstat,
test95_OT_TOP3$uc.LRstat)
UCpval95_OT <- c(test95_OT_TOP1$uc.LRp,
test95_OT_TOP2$uc.LRp,
test95_OT_TOP3$uc.LRp)
CCstat95_OT <- c(test95_OT_TOP1$cc.LRstat,
test95_OT_TOP2$cc.LRstat,
test95_OT_TOP3$cc.LRstat)
CCpval95_OT <- c(test95_OT_TOP1$cc.LRp,
test95_OT_TOP2$cc.LRp,
test95_OT_TOP3$cc.LRp)
LRuc95_fmt <- paste0(round(UCstat95_OT, 2), " (", round(UCpval95_OT, 4), ")")
LRcc95_fmt <- paste0(round(CCstat95_OT, 2), " (", round(CCpval95_OT, 4), ")")
Lopez95_OT <- round(c(
lopez_loss(V_test, Var95_OT_TOP1),
lopez_loss(V_test, Var95_OT_TOP2),
lopez_loss(V_test, Var95_OT_TOP3)
), 5)
# === Table  95% ===
tableVaR95_OT <- data.frame(
Model = models_OT,
ExpVio95 = ExpVio95_OT,
ActVio95 = ActVio95_OT,
MT95 = ZT95_OT,
LRuc = LRuc95_fmt,
LRcc = LRcc95_fmt,
Lopez95 = Lopez95_OT * (100/ActVio95_OT)
)
# === 99% ===
ExpVio99_OT <- c(test99_OT_TOP1$expected.exceed,
test99_OT_TOP2$expected.exceed,
test99_OT_TOP3$expected.exceed)
ActVio99_OT <- c(test99_OT_TOP1$actual.exceed,
test99_OT_TOP2$actual.exceed,
test99_OT_TOP3$actual.exceed)
ZT99_OT <- round(ActVio99_OT / length(V_test), 4)
UCstat99_OT <- c(test99_OT_TOP1$uc.LRstat,
test99_OT_TOP2$uc.LRstat,
test99_OT_TOP3$uc.LRstat)
UCpval99_OT <- c(test99_OT_TOP1$uc.LRp,
test99_OT_TOP2$uc.LRp,
test99_OT_TOP3$uc.LRp)
CCstat99_OT <- c(test99_OT_TOP1$cc.LRstat,
test99_OT_TOP2$cc.LRstat,
test99_OT_TOP3$cc.LRstat)
CCpval99_OT <- c(test99_OT_TOP1$cc.LRp,
test99_OT_TOP2$cc.LRp,
test99_OT_TOP3$cc.LRp)
LRuc99_fmt <- paste0(round(UCstat99_OT, 2), " (", round(UCpval99_OT, 4), ")")
LRcc99_fmt <- paste0(round(CCstat99_OT, 2), " (", round(CCpval99_OT, 4), ")")
Lopez99_OT <- round(c(
lopez_loss(V_test, VaR99_OT_TOP1),
lopez_loss(V_test, VaR99_OT_TOP2),
lopez_loss(V_test, VaR99_OT_TOP3)
), 5)
# === Table 99% ===
tableVaR99_OT <- data.frame(
Model = models_OT,
ExpVio99 = ExpVio99_OT,
ActVio99 = ActVio99_OT,
MT99 = ZT99_OT,
LRuc = LRuc99_fmt,
LRcc = LRcc99_fmt,
Lopez99 = Lopez99_OT * (100/ActVio99_OT)
tableVaR99_OT
tableVaR99_OT
tableVaR95_OT
tableVaR95
names(tableVaR95) <- c("Model", "ExpVio", "ActVio", "MT", "LRuc", "LRcc", "Lopez")
names(tableVaR99) <- c("Model", "ExpVio", "ActVio", "MT", "LRuc", "LRcc", "Lopez")
tableVaR_dynamic <- rbind(tableVaR95, tableVaR99)
names(tableVaR95_static) <- c("Model", "ExpVio", "ActVio", "MT", "LRuc", "LRcc", "Lopez")
names(tableVaR99_static) <- c("Model", "ExpVio", "ActVio", "MT", "LRuc", "LRcc", "Lopez")
tableVaR_static <- rbind(tableVaR95_static, tableVaR99_static)
names(tableVaR95_OT) <- c("Model", "ExpVio", "ActVio", "MT", "LRuc", "LRcc", "Lopez")
names(tableVaR99_OT) <- c("Model", "ExpVio", "ActVio", "MT", "LRuc", "LRcc", "Lopez")
tableVaR_OT <- rbind(tableVaR95_OT, tableVaR99_OT)
tableVaR95_all <- rbind(tableVaR95, tableVaR95_static, tableVaR95_OT)
tableVaR99_all <- rbind(tableVaR99, tableVaR99_static, tableVaR99_OT)
tableVaR95_all
tableVaR99
tableVaR95_static
tableVaR99_static
coeff_variance
tableVaR95_OT
tableVaR99_OT
copula_names <- c("T", "GAUSS", "FRANK", "GUMBEL", "CLAYTON", "JOE")
# Separate lists
plot_list_dynamic <- vector("list", length(copula_names))
plot_list_static  <- vector("list", length(copula_names))
# Create plot for dynamic fit
for (i in seq_along(copula_names)) {
copula <- copula_names[i]
VaR95 <- get(paste0("VaR95_MC_", copula))
VaR99 <- get(paste0("VaR99_MC_", copula))
p <- (function() {
plot_VaR_hits(copula, V_test, X_test, VaR95, VaR99,
col = c("black", "darkblue", "lightblue", "red", "orange"))
ggplot2::last_plot()
})()
p <- p + labs(title = paste(copula, "- Dynamic Fit"), x = NULL, y = NULL) +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 20),
axis.text = element_text(size = 6))
plot_list_dynamic[[i]] <- p
}
# Create plot for static fit
for (i in seq_along(copula_names)) {
copula <- copula_names[i]
VaR95 <- get(paste0("VaR95_MC_", copula, "_static"))
VaR99 <- get(paste0("VaR99_MC_", copula, "_static"))
p <- (function() {
plot_VaR_hits(copula, V_test, X_test, VaR95, VaR99,
col = c("black", "darkgreen", "green", "red", "orange"))
ggplot2::last_plot()
})()
p <- p + labs(title = paste(copula, "- Static Fit"), x = NULL, y = NULL) +
theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 20),
axis.text = element_text(size = 6))
plot_list_static[[i]] <- p
}
#  T, GAUSS, CLAYTON
indici_parte1 <- match(c("T", "GAUSS", "CLAYTON"), copula_names)
paired_plots_1 <- vector("list", length(indici_parte1) * 2)
for (i in seq_along(indici_parte1)) {
idx <- indici_parte1[i]
paired_plots_1[[2*i - 1]] <- plot_list_dynamic[[idx]]
paired_plots_1[[2*i]]     <- plot_list_static[[idx]]
}
combined_part1 <- wrap_plots(paired_plots_1, ncol = 2, nrow = 3)
#  FRANK, GUMBEL, JOE
indici_parte2 <- match(c("FRANK", "GUMBEL", "JOE"), copula_names)
paired_plots_2 <- vector("list", length(indici_parte2) * 2)
for (i in seq_along(indici_parte2)) {
idx <- indici_parte2[i]
paired_plots_2[[2*i - 1]] <- plot_list_dynamic[[idx]]
paired_plots_2[[2*i]]     <- plot_list_static[[idx]]
}
combined_part2 <- wrap_plots(paired_plots_2, ncol = 2, nrow = 3)
# Save
ggsave("Data/Chart Post preliminar analysis/COMPARISON_STATIC_vs_DYNAMIC_part1.pdf",
combined_part1, width = 12, height = 9)
ggsave("Data/Chart Post preliminar analysis/COMPARISON_STATIC_vs_DYNAMIC_part2.pdf",
combined_part2, width = 12, height = 9)
# Optimal Trasport plots
VaR95_list <- list(Var95_OT_TOP1, Var95_OT_TOP2, Var95_OT_TOP3)
VaR99_list <- list(VaR99_OT_TOP1, VaR99_OT_TOP2, VaR99_OT_TOP3)
titles <- c("40 bins - 0.0050 eps", "75 bins - 0.0050 eps", "50 bins - 0.0050 eps")
col_custom <- c("black", "darkred", "lightcoral", "red", "orange")
plots_list <- list()
for (i in 1:3) {
p <- (function() {
plot_VaR_OT(V_test = V_test[1:1110],
dates = X_test$date,
VaR95 = VaR95_list[[i]],
VaR99 = VaR99_list[[i]],
col = col_custom,
title_text = titles[i])
ggplot2::last_plot()
})()
plots_list[[i]] <- p
}
combined_OT <- wrap_plots(plots_list, ncol = 1)
ggsave("Data/Chart Post preliminar analysis/combined_VaR_OT.pdf",
combined_OT, width = 10, height = 12)
tableVaR95
tableVaR95
test95_T
tableVaR95_all
test95_CLAYTON_static
test95_FRANK_static
tableVaR95
tableVaR99
tableVaR95_static
tableVaR99_static
tableVaR95_OT
tableVaR99_OT
source("C:/Users/giuse/OneDrive/Desktop/Preparazione tesi/Thesis Code/1_Preliminar_analysis.R")
